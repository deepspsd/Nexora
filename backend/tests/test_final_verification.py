"""
Final Verification Test - MVP Builder System
Tests all critical components with detailed output
"""

import asyncio
import aiohttp
import json
import os
from dotenv import load_dotenv

load_dotenv()

DEEPSEEK_KEY = os.getenv("DEEPSEEK_API_KEY")
E2B_KEY = os.getenv("E2B_API_KEY")

print("\n" + "="*70)
print("  NEXORA MVP BUILDER - FINAL VERIFICATION TEST")
print("="*70 + "\n")

async def test_1_deepseek():
    """Test DeepSeek API"""
    print("[ 1/5 ] Testing DeepSeek API Connection...")
    
    if not DEEPSEEK_KEY:
        print("    ‚ö†Ô∏è  No DeepSeek API key - SKIPPED")
        return False
    
    try:
        headers = {"Authorization": f"Bearer {DEEPSEEK_KEY}", "Content-Type": "application/json"}
        payload = {
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": "Say 'OK'"}],
            "max_tokens": 10
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://api.deepseek.com/chat/completions",
                headers=headers,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=15)
            ) as response:
                if response.ok:
                    data = await response.json()
                    print(f"    ‚úÖ DeepSeek API working - Response: {data['choices'][0]['message']['content']}")
                    return True
                else:
                    print(f"    ‚ùå DeepSeek API failed - Status: {response.status}")
                    return False
    except Exception as e:
        print(f"    ‚ùå Exception: {str(e)[:50]}")
        return False

async def test_2_backend():
    """Test Backend"""
    print("\n[ 2/5 ] Testing Backend Server...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:8000/health", timeout=aiohttp.ClientTimeout(total=5)) as response:
                if response.ok:
                    print("    ‚úÖ Backend server is running")
                    return True
                else:
                    print(f"    ‚ùå Backend returned status: {response.status}")
                    return False
    except Exception as e:
        print(f"    ‚ùå Cannot connect to backend: {str(e)[:50]}")
        return False

async def test_3_mvp_agent():
    """Test MVP Agent"""
    print("\n[ 3/5 ] Testing MVP Agent Initialization...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:8000/api/mvp-builder/health") as response:
                if response.ok:
                    data = await response.json()
                    if data.get('agent') == 'initialized':
                        print(f"    ‚úÖ MVP Agent initialized")
                        print(f"    üìä Available models: {data.get('models')}")
                        return True
                    else:
                        print(f"    ‚ùå Agent not initialized: {data.get('agent')}")
                        return False
                else:
                    print(f"    ‚ùå Health check failed: {response.status}")
                    return False
    except Exception as e:
        print(f"    ‚ùå Exception: {str(e)[:50]}")
        return False

async def test_4_streaming():
    """Test Streaming Code Generation"""
    print("\n[ 4/5 ] Testing Streaming Code Generation...")
    print("    üîÑ Generating code (this may take 10-20 seconds)...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:8000/api/mvp/stream",
                json={
                    "prompt": "Create a simple React button component",
                    "conversationHistory": []
                },
                timeout=aiohttp.ClientTimeout(total=45)
            ) as response:
                if not response.ok:
                    print(f"    ‚ùå Request failed: {response.status}")
                    return False
                
                events = {"sandbox": False, "content": False, "files": False, "complete": False}
                file_count = 0
                content_size = 0
                
                async for line in response.content:
                    line = line.decode('utf-8').strip()
                    if line.startswith('data: '):
                        try:
                            data = json.loads(line[6:])
                            event_type = data.get('type')
                            
                            if event_type == 'sandbox_url':
                                events['sandbox'] = True
                            elif event_type == 'content':
                                events['content'] = True
                                content_size += len(data.get('content', ''))
                            elif event_type == 'file_operation':
                                events['files'] = True
                                if data.get('status') == 'completed':
                                    file_count += 1
                            elif event_type == 'complete':
                                events['complete'] = True
                                break
                            elif event_type == 'error':
                                print(f"    ‚ùå Stream error: {data.get('message')}")
                                return False
                        except:
                            pass
                
                success = all(events.values())
                if success:
                    print(f"    ‚úÖ Streaming working perfectly!")
                    print(f"    üì¶ Sandbox created: {events['sandbox']}")
                    print(f"    üìù Content generated: {content_size} characters")
                    print(f"    üìÑ Files created: {file_count}")
                    print(f"    ‚úì Stream completed: {events['complete']}")
                    return True
                else:
                    print(f"    ‚ö†Ô∏è  Partial success - Events: {events}")
                    return False
                    
    except asyncio.TimeoutError:
        print("    ‚ùå Timeout after 45 seconds")
        return False
    except Exception as e:
        print(f"    ‚ùå Exception: {str(e)[:50]}")
        return False

async def test_5_chat():
    """Test Chat Endpoint"""
    print("\n[ 5/5 ] Testing Chat Endpoint...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:8000/api/chat",
                json={"message": "Hello"},
                timeout=aiohttp.ClientTimeout(total=15)
            ) as response:
                if response.ok:
                    data = await response.json()
                    print(f"    ‚úÖ Chat endpoint working")
                    print(f"    üí¨ Intent detection: {data.get('intent')}")
                    return True
                else:
                    print(f"    ‚ùå Chat failed: {response.status}")
                    return False
    except Exception as e:
        print(f"    ‚ùå Exception: {str(e)[:50]}")
        return False

async def main():
    results = []
    
    results.append(await test_1_deepseek())
    results.append(await test_2_backend())
    results.append(await test_3_mvp_agent())
    results.append(await test_4_streaming())
    results.append(await test_5_chat())
    
    # Summary
    print("\n" + "="*70)
    print("  TEST RESULTS SUMMARY")
    print("="*70)
    
    passed = sum(results)
    total = len(results)
    
    tests = [
        "DeepSeek API",
        "Backend Server",
        "MVP Agent",
        "Streaming Generation",
        "Chat Endpoint"
    ]
    
    for i, (test, result) in enumerate(zip(tests, results), 1):
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"  [{i}] {test:.<50} {status}")
    
    print(f"\n  Total: {passed}/{total} tests passed")
    
    if passed == total:
        print("\n  üéâ ALL SYSTEMS GO! MVP Builder is fully operational.")
        print("  ‚úì DeepSeek AI integration working")
        print("  ‚úì Streaming code generation working")
        print("  ‚úì Live preview ready (E2B sandbox)")
        print("  ‚úì Chat interface functional")
        print("\n  üëâ Ready to test in browser at: http://localhost:3000/mvp-development")
    elif passed >= 3:
        print("\n  ‚ö†Ô∏è  MOSTLY WORKING - Core features operational")
        print("  ‚úì Main functionality is ready for testing")
    else:
        print("\n  ‚ùå CRITICAL ISSUES - Please check configuration")
        print("  ‚Ä¢ Verify API keys in .env file")
        print("  ‚Ä¢ Ensure backend is running")
    
    print("\n" + "="*70 + "\n")
    
    return passed == total

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Tests interrupted by user\n")
        exit(1)
